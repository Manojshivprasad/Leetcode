# Python 3

# Solution 1
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                if nums[i] + nums[j] == target:
                    return [i,j]
                else:
                    continue
_____________________________________________________________________
TIME COMPLEXITY - O(N^2)
Iterates list i and Itterate the list again starting from i + 1
Check the element i and j, If the elements add up to target return corresponding numeber[i,j]
______________________________________________________________________

# Soulution 2
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        data = {}
        for a, i in enumerate(nums):
            if i in data:
                return([data[i],a])
            data[target - i] = a
_____________________________________________________________________
TIME COMPLEXITY - O(N)
Done using hash map
target - i will be stored in a hash with postion of i
When a number from list is in hash map it return the postion corresponding value
_____________________________________________________________________

# Cpp

# Solution 1
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        for (int i = 0; i < nums.size(); i++){
            for (int j = i + 1; j < nums.size(); j++){
                if (nums[i] + nums[j] == target){
                    return {i,j};
                }
            }
        }
        return {};
    }};
_______________________________________________________________________
Itterate the list i and check for the numeber after i which add ups to target
_______________________________________________________________________

# Solution 2
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> data;
        for (int i = 0; i < nums.size(); i++){
            int x = nums[i];
            if (data.find(x) != data.end()){
                return {data[x],i};
            }
            data[target-x] = i;
        }
        return {};
    }
};
