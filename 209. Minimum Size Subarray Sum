# Python 3

class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        sum1 = 0
        ix = 0
        flag = False
        result = float('inf')
        for i in range(len(nums)):
            sum1 += nums[i]
            while sum1 >= target:
                result = min(result,i-ix+1)
                flag = True
                sum1 -= nums[ix]
                ix += 1
        if flag:
            return result
        else:
            return 0

# C++

class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int minLength = INT_MAX;
        int sum1 = 0;
        int x = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum1 += nums[i];
            while (sum1 >= target) {
                minLength = min(minLength, i - x + 1);
                sum1 -= nums[x];
                x++;
            }
        }
        return (minLength == INT_MAX) ? 0 : minLength;
    }
};
