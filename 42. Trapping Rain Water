# Python 3

class Solution:
    def trap(self, height: List[int]) -> int:
        l = 0
        r = len(height) - 1
        lmax = 0
        rmax = 0
        water = 0
        while l <= r:
            if height[l] < height[r]:
                if height[l] >= lmax:
                    lmax = height[l]
                else:
                    water += lmax - height[l]
                l += 1
            else:
                if height[r] >= rmax:
                    rmax = height[r]
                else:
                    water += rmax - height[r]
                r -= 1
        return(water)

# Solution 2

class Solution:
    def trap(self, height: List[int]) -> int:
        result = 0
        lmax = [height[0]]
        rmax = [height[-1]]
        for a, i in enumerate(height[1::]):
            lmax.append(max(i, lmax[a]))
        height.reverse()
        for a, i in enumerate(height[1::]):
            rmax.append(max(i, rmax[a]))
        rmax.reverse()
        for i in range(1,len(height)-1):
            result += min(lmax[i],rmax[i])-height[i]
        return(result)

# C++

class Solution {
public:
    int trap(vector<int>& height) {
        vector<int> lmax(height.size(),0);
        vector<int> rmax(height.size(),0);
        lmax[0] = height[0];
        int result = 0;
        rmax[height.size()-1] = height[height.size()-1];
        for (int i = 1; i < height.size()-1; i++){
            lmax[i] = max(height[i],lmax[i-1]);
        }
        for (int i = height.size()-2; i < height.size()-1; i--){
            rmax[i] = max(height[i],rmax[i+1]);
        }
        for (int i = 1; i < height.size()-1; i++){
            result += min(lmax[i],rmax[i]) - height[i];
        }
        return result;
    }
};
