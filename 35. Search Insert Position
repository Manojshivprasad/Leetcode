# Python 3

class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        i = 0
        j = len(nums) - 1
        while i <= j:
            mid = i + (j - i) // 2
            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                i = mid + 1
            else:
                j = mid - 1
        else:
            return i

# C++

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int min = 0;
        int max = nums.size() - 1;
        while (min <= max){
            int mid = min + (max - min)/2;
            if (nums[mid] == target){
                return mid;
            }
            else if (nums[mid] < target){
                min = mid + 1;
            }
            else{
                max = mid - 1;
            }
        }
        return min;
        }
    };
