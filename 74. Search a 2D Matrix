# Python 3

# Soultion 1
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        l1 = [j for i in matrix for j in i]
        if target in l1:
            return True
        else:
            return False
__________________________________________________________________________
TIME COMPLEXITY - O(n*m)
__________________________________________________________________________

# Solution 2
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        i = 0
        j = len(matrix[0]) - 1
        while i >= 0 and i < len(matrix) and j >= 0 and j < len(matrix[0]):
            if matrix[i][j] == target:
                return True
            elif matrix[i][j] > target:
                j -= 1
            elif matrix[i][j] < target:
                i += 1
        return False
__________________________________________________________________________
TIME COMPLEXITY - O(N + M)
__________________________________________________________________________

# Soultion 3
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        row = len(matrix)
        column = len(matrix[0])
        start = 0
        end = (row * column) - 1
        while start <= end:
            mid = start + (end - start) // 2
            i = mid // column
            j = mid % column
            if matrix[i][j] == target:
                return True
            elif matrix[i][j] > target:
                end = mid - 1
            else:
                start = mid + 1
        return False

___________________________________________________________________________
TIME COMPLEXITY - O(log(M * N))
___________________________________________________________________________
